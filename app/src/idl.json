{
	"version": "0.1.0",
	"name": "masterarbeit_philipp_roiner",
	"instructions": [
		{
			"name": "mintNft",
			"docs": [
				"Mints a token, creates a metadata account, creates a master edition account",
				"and a image account for a given image that is stored on the IPFS.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<MintNFT>",
				"* `creator_key`: The public key of the creator of the NFT.",
				"* `name`: The name of the NFT.",
				"* `symbol`: The symbol of the token.",
				"* `uri`: The URI of the NFT.",
				"* `available`: Whether the NFT is available for purchase or not.",
				"* `allowed_license_types`: Specifies the license type.",
				"* `one_time_price`: Specifies the price for an RF license."
			],
			"accounts": [
				{
					"name": "mintAuthority",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "mint",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "tokenProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "metadata",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "masterEdition",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "tokenAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "tokenMetadataProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "payer",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "rent",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "image",
					"isMut": true,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "creatorKey",
					"type": "publicKey"
				},
				{
					"name": "name",
					"type": "string"
				},
				{
					"name": "symbol",
					"type": "string"
				},
				{
					"name": "uri",
					"type": "string"
				},
				{
					"name": "available",
					"type": "bool"
				},
				{
					"name": "allowedLicenseTypes",
					"type": "u8"
				},
				{
					"name": "oneTimePrice",
					"type": "u64"
				}
			]
		},
		{
			"name": "mintEdition",
			"docs": [
				"Mints a new edition for a given master edition and copies its NFT and metadata.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<MintPrintEdition>",
				"* `edition`: Edition number"
			],
			"accounts": [
				{
					"name": "originalMint",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "newMetadata",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "newEdition",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "masterEdition",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "newMint",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "newTokenAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "editionMarkPda",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "newMintAuthority",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "payer",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "tokenAccountOwner",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "tokenAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "newMetadataUpdateAuthority",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "metadata",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "tokenMetadataProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "tokenProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "rent",
					"isMut": false,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "edition",
					"type": "u64"
				}
			]
		},
		{
			"name": "initializeOffer",
			"docs": [
				"It initializes a new offer account and a corresponding offer escrow account.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<InitializeOffer>",
				"* `bump`: The offer account bump.",
				"* `escrow_bump`: The offer escrow account bump.",
				"* `offer_uri`: The URI of the offer."
			],
			"accounts": [
				{
					"name": "offerAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "offerMaker",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "mint",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "author",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "offerEscrowAccount",
					"isMut": true,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "bump",
					"type": "u8"
				},
				{
					"name": "escrowBump",
					"type": "u8"
				},
				{
					"name": "offerUri",
					"type": "string"
				}
			]
		},
		{
			"name": "makeOffer",
			"docs": [
				"Transfers funds to the offer escrow account.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<MakeOffer>",
				"* `lamports`: The amount of lamports to transfer to the offer escrow account."
			],
			"accounts": [
				{
					"name": "offerAccount",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "offerMaker",
					"isMut": false,
					"isSigner": true
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "offerEscrowAccount",
					"isMut": true,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "lamports",
					"type": "u64"
				}
			]
		},
		{
			"name": "cancelOffer",
			"docs": [
				"The funds of the offer escrow account will be transferred back to the offer maker.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<CancelOffer> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction."
			],
			"accounts": [
				{
					"name": "offerAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "offerMaker",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "offerEscrowAccount",
					"isMut": true,
					"isSigner": false
				}
			],
			"args": []
		},
		{
			"name": "acceptOffer",
			"docs": [
				"The offer escrow account is debited and the offer maker is credited. The license is updated to",
				"reflect the new owner and the license type",
				"",
				"Arguments:",
				"that are involved in the transaction.",
				"* `ctx`: Context<AcceptOffer> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction."
			],
			"accounts": [
				{
					"name": "license",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "offerAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "offerMaker",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "author",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				},
				{
					"name": "offerEscrowAccount",
					"isMut": true,
					"isSigner": false
				}
			],
			"args": []
		},
		{
			"name": "updateImageAvailability",
			"docs": [
				"Updates the availability of an image.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<UpdateImage> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction.",
				"* `available`: New availability"
			],
			"accounts": [
				{
					"name": "imageAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "author",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "availability",
					"type": "bool"
				}
			]
		},
		{
			"name": "updateImageAllowedLicenseTypes",
			"docs": [
				"The function updates the license type of an image.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<UpdateImage> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction.",
				"* `allowed_license_types`: New license type."
			],
			"accounts": [
				{
					"name": "imageAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "author",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "allowedLicenseTypes",
					"type": "u8"
				}
			]
		},
		{
			"name": "updateImageOneTimePrice",
			"docs": [
				"The function updates the one time price of an image",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<UpdateImage> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction.",
				"* `one_time_price`: New price."
			],
			"accounts": [
				{
					"name": "imageAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "author",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "oneTimePrice",
					"type": "u64"
				}
			]
		},
		{
			"name": "buyRfLicense",
			"docs": [
				"If the image account allows RF licenses, then transfer the one-time price from the payer to the",
				"author, and create a new RF license for the payer.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<BuyRfLicense> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction."
			],
			"accounts": [
				{
					"name": "license",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "imageAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "payer",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "author",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				}
			],
			"args": []
		},
		{
			"name": "createLicense",
			"docs": [
				"This function creates a RM license for the given image account.",
				"",
				"Arguments:",
				"",
				"* `ctx`: Context<CreateLicense> - This is the context of the transaction. It contains the accounts",
				"that are involved in the transaction.",
				"* `valid_until`: The time in seconds since the Unix epoch when the license expires.",
				"* `license_information`: CID from the IPFS that holds all the license information."
			],
			"accounts": [
				{
					"name": "license",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "imageAccount",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "licenseRecipient",
					"isMut": true,
					"isSigner": false
				},
				{
					"name": "author",
					"isMut": true,
					"isSigner": true
				},
				{
					"name": "systemProgram",
					"isMut": false,
					"isSigner": false
				}
			],
			"args": [
				{
					"name": "validUntil",
					"type": "i64"
				},
				{
					"name": "licenseInformation",
					"type": "string"
				}
			]
		}
	],
	"accounts": [
		{
			"name": "Image",
			"type": {
				"kind": "struct",
				"fields": [
					{
						"name": "author",
						"type": "publicKey"
					},
					{
						"name": "timestamp",
						"type": "i64"
					},
					{
						"name": "mintAddress",
						"type": "publicKey"
					},
					{
						"name": "available",
						"type": "bool"
					},
					{
						"name": "allowedLicenseTypes",
						"type": "u8"
					},
					{
						"name": "oneTimePrice",
						"type": "u64"
					}
				]
			}
		},
		{
			"name": "License",
			"type": {
				"kind": "struct",
				"fields": [
					{
						"name": "licenseType",
						"type": "u8"
					},
					{
						"name": "owner",
						"type": "publicKey"
					},
					{
						"name": "licensedImage",
						"type": "publicKey"
					},
					{
						"name": "timestamp",
						"type": "i64"
					},
					{
						"name": "validUntil",
						"type": {
							"option": "i64"
						}
					},
					{
						"name": "licenseInformation",
						"type": {
							"option": "string"
						}
					}
				]
			}
		},
		{
			"name": "Offer",
			"type": {
				"kind": "struct",
				"fields": [
					{
						"name": "offerMaker",
						"type": "publicKey"
					},
					{
						"name": "mint",
						"type": "publicKey"
					},
					{
						"name": "author",
						"type": "publicKey"
					},
					{
						"name": "offerUri",
						"type": "string"
					},
					{
						"name": "bump",
						"type": "u8"
					},
					{
						"name": "escrowBump",
						"type": "u8"
					},
					{
						"name": "escrowPda",
						"type": "publicKey"
					}
				]
			}
		},
		{
			"name": "EscrowAccount",
			"type": {
				"kind": "struct",
				"fields": []
			}
		}
	],
	"errors": [
		{
			"code": 6000,
			"name": "MintFailed",
			"msg": "Mint failed!"
		},
		{
			"code": 6001,
			"name": "MetadataCreateFailed",
			"msg": "Metadata account create failed!"
		},
		{
			"code": 6002,
			"name": "WrongLicenseType",
			"msg": "License Type doesnt allow to buy license!"
		}
	],
	"metadata": {
		"address": "5C4WbaLJTN1q7UiUAcC3yYttbEHK6AUvFoopzeDhmMj9"
	}
}
